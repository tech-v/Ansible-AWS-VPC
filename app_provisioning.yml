- hosts: localhost
  connection: local
  gather_facts: False
  tasks:
    - name: Import VPC variables
      include_vars: variables/output_vars1.yml
    - name: Import VPC variables
      include_vars: variables/ami_ids

    - name: Creating ec2 key for nginx
      ec2_key:
       name: nginxkey
       region: "{{region}}"
      register: nginxkey

    - name: Saving the key into file
      copy: 
        content: "{{nginxkey.key.private_key}}"
        dest: "./nginxkey.pem"
        mode: 0600
      when: nginxkey.changed

    - name: Creating the security group for Load Balancer
      ec2_group:
        name: Loadbalancer
        description: Allow port 80 from everywhere and all ports within SG
        region: "{{region}}"
        vpc_id: "{{vpcid}}" 
        rules: 
         - proto: tcp
           from_port: 80
           to_port: 80
           cidr_ip: 0.0.0.0/0
      register: loadbalancer_out


    - name: Creating the security group for stack
      ec2_group:
        name: stacksg
        description: Allow port 80 from everywhere and all ports within SG
        region: "{{region}}"
        vpc_id: "{{vpcid}}"
        purge_rules: no 
        rules: 
         - proto: tcp
           from_port: 80
           to_port: 80
           group_id: "{{loadbalancer_out.group_id}}"
         - proto: tcp
           from_port: 22
           to_port: 22
           group_id: "{{BastionSGid}}"             
      register: stacksg_out

    - name: Updating security group for stack
      ec2_group:
        name: stacksg
        description: Allow port 22 from everywhere and all ports within SG
        region: "{{region}}"
        vpc_id: "{{vpcid}}"
        purge_rules: no 
        rules: 
         - proto: all
           group_id: "{{stacksg_out.group_id}}"
      register: stacksgupdated_out

    - name: Create EC2 Instance for NGINX
      ec2:
        key_name: nginxkey
        region: "{{region}}"
        instance_type: t2.micro
        image: "{{ ubuntu_image }}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: "WEB01"
          Project: Personal
          Owner: Mehmood
        exact_count: 1
        count_tag:
          Name: "WEB01"
          Project: Personal
          Owner: Mehmood
        group_id: "{{stacksg_out.group_id}}"
        vpc_subnet_id: "{{privsub1id}}"
      register: fornginxout

    - debug: 
        var: fornginxout

    - name: Create EC2 Instance for TOMCAT
      ec2:
        key_name: nginxkey
        region: "{{region}}"
        instance_type: t2.micro
        image: "{{ ubuntu_image }}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: "TOMCAT"
          Project: Personal
          Owner: Mehmood
        exact_count: 1
        count_tag:
          Name: "TOMCAT"
          Project: Personal
          Owner: Mehmood
        group_id: "{{stacksg_out.group_id}}"
        vpc_subnet_id: "{{privsub1id}}"
      register: fortomcatout

    - debug: 
        var: fortomcatout

    - name: Create EC2 Instance for memcache
      ec2:
        key_name: nginxkey
        region: "{{region}}"
        instance_type: t2.micro
        image: "{{ ubuntu_image }}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: "MEMCACHE"
          Project: Personal
          Owner: Mehmood
        exact_count: 1
        count_tag:
          Name: "MEMCACHE"
          Project: Personal
          Owner: Mehmood
        group_id: "{{stacksg_out.group_id}}"
        vpc_subnet_id: "{{privsub1id}}"
      register: formemcacheout

    - debug: 
        var: formemcacheout

    - name: Create EC2 Instance for rabbitmq
      ec2:
        key_name: nginxkey
        region: "{{region}}"
        instance_type: t2.micro
        image: "{{ ubuntu_image }}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: "RABBITMQ"
          Project: Personal
          Owner: Mehmood
        exact_count: 1
        count_tag:
          Name: "RABBITMQ"
          Project: Personal
          Owner: Mehmood
        group_id: "{{stacksg_out.group_id}}"
        vpc_subnet_id: "{{privsub1id}}"
      register: forrabbitmqout

    - debug: 
        var: forrabbitmqout

    - name: Create EC2 Instance for Database
      ec2:
        key_name: nginxkey
        region: "{{region}}"
        instance_type: t2.micro
        image: "{{ ubuntu_image }}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: "Database"
          Project: Personal
          Owner: Mehmood
        exact_count: 1
        count_tag:
          Name: "Database"
          Project: Personal
          Owner: Mehmood
        group_id: "{{stacksg_out.group_id}}"
        vpc_subnet_id: "{{privsub1id}}"
      register: fordatabaseout

    - debug: 
        var: fordatabaseout


    - local_action:
        module: ec2_elb_lb
        name: "mehmoodapp-elb"
        region: "{{region}}"
        state: present
        instance_ids:
          - "{{ fornginxout.tagged_instances[0].id }}"
        purge_instance_ids: true
        security_group_ids: "{{ loadbalancer_out.group_id }}"
        subnets:
          - "{{ pubsub1id }}"
          - "{{ pubsub2id }}"
          - "{{ pubsub3id }}"
        listeners:
          - protocol: http # options are http, https, ssl, tcp
            load_balancer_port: 80
            instance_port: 80
    
    
    - name: Insert/Update Hosts IP & Name in file provision-stack/group-vars/hostsip
      blockinfile:
        path: provision-stack/group-vars/postexecution
        block: |
          web01_ip: {{ fornginxout.tagged_instances[0].private_ip }}
          app01_ip: {{ fortomcatout.tagged_instances[0].private_ip }}
          rmq01_ip: {{ forrabbitmqout.tagged_instances[0].private_ip }}
          mc01_ip: {{ formemcacheout.tagged_instances[0].private_ip }}
          db01_ip: {{ fordatabaseout.tagged_instances[0].private_ip }}
    - name: Copy login key to provision_stack directory
      copy:
        src: nginxkey.pem
        dest: provision-stack/nginxkey.pem
        mode: '0400'

    - name: Insert/Update Inventory file provision-stack/inventory-vpro
      blockinfile:
        path: provision-stack/postexecution
        block: |
          web01 ansible_host={{ fornginxout.tagged_instances[0].private_ip }}
          app01 ansible_host={{ fortomcatout.tagged_instances[0].private_ip }}
          rmq01 ansible_host={{ forrabbitmqout.tagged_instances[0].private_ip }}
          mc01 ansible_host={{ formemcacheout.tagged_instances[0].private_ip }}
          db01 ansible_host={{ fordatabaseout.tagged_instances[0].private_ip }}
          cntl ansible_host=127.0.0.1 ansible_connection=local
          [websrvgrp]
          web01
          [appsrvgrp]
          app01
          [rmqsrvgrp]
          rmq01
          [mcsrvgrp]
          mc01
          [dbsrvgrp]
          db01
          [control]
          cntl
          [stack_inst:children]
          websrvgrp
          appsrvgrp
          rmqsrvgrp
          mcsrvgrp
          dbsrvgrp
          [stack_inst:vars]
          ansible_user=ubuntu
          ansible_ssh_private_key_file=nginx.pem
          #ansible_python_interpreter=/usr/bin/python3